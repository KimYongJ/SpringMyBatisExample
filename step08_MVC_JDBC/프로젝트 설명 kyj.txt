[학 습]
1. MyBatis
	- JDBC를 통해 DB에 접근하는 작업을 캡슐화 하고,
	- 일반 SQL 쿼리 , 프로시저 등의 고급 매핑을 지원하는 프레임워크
	- 사용이유 : 프로그램 소스코드와 SQL 쿼리가 분리되기 때문에 유지보수가 편리하고 코드가 간결해진다
2. 파일 흐름
	- main에서 deptService(인터페이스)를 선언한다. 파일 구성은 deptService인터페이스를 구현하는 객체가 있다.
	- 이 구현 객체 안에서 deptMapper를 호출한다. deptMapper는 deptMapper.xml에 정의된 SQL문을 실행해 반환해준다.
3. 자바와 MyBatis의 규칙
	- XML에서 지정하는 SQL쿼리문에서 사용되는 언더바는 java에서 카멜케이스 deptNo 이런식으로 인식함

4. REST Representational State Transfer
	- 웹에서 데이터를 전송하고 처리하는 방법을 정의한 인터페이스
	- HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시
		- 예시) https://mybatis.org/mybatis-3/dynamic-sql.html 에서 .org 다음부터가 URI이다.
	- HTTP Method를 통해 해당 자원에 대한 CRUD Operation을 적용
	- 사용 이유 : 코드가 간결해진다.
	- Resource 중심의 설계 아키텍쳐
	- 소스코드 예시에서 사용한 파일들 : RestController.java + 

	- 메소드
		- POST : 데이터 생성 ( Create )
		- GET : 데이터 조회 ( Select )
		- PUT : 데이터 수정 ( Update )
		- DELETE : 데이터 삭제 ( Delete )

	- 구성
		- 자원(Resource) - URI
		- 행위 (Verb) - HTTP Method
		- 표현 (Representations)

	- 규칙
		- 소문자 사용(대소문자 구분)
		- Hypen (-) 사용
		- 공백 제거
		- CRUD 포함 x
			ex) id 번호가 7번인 책을 삭제하려면 /book/delete/1 이렇게 delete를 써주지 않고 /book/1 이라고 간단히 표현했을 때 삭제가 되도록 만든다.
				delete라는 것을 알리기 위해서는 메소드 중에서 데이터 삭제를 의미하는 DELETE를 사용한다. 데이터조회는 GET 메소드사용, 데이터 생성은 POST 사용
				데이터 수정은 PUT 메소드를 사용한다.
		- /(슬래쉬) : /(슬래쉬)의 의미는 계층 관계를 나타낸다.
			ex) http://study.spring.com 에서 마지막에 / 슬래쉬를 붙이지 않는다.

	- HTTP Status Code
		- 200 : 정상 실행
		- 500 : 서버 문제
		- 400 : 요청 오류 (주소 틀림등..)

	- HATEOAS Hypermedia As The Of Engine Application State
		- REST API에 대한 결과 정보를 의미한다.

5. 자원 공유
	- 동일 출처 정책 SOP Same-Origin Policy
		- 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식
			- Origin 구성
				- URL Schema 
				- Hostname 
				- Port (8080, 80)
	- 동일 출처 구분
		http://oringin.spring.com/dev/back.html	// 동일 출처
		http://oringin.spring.com/server/server.html	// 동일 출처 경로가 다른것이고 나머지는 같아서 동일 출처이다. 
		https://oringin.spring.com/server/secure.html // 다른 출처이다. http랑 https랑은 다르다
		http://oringin.spring.com:81/    // 다른 출처이다. 포트가 다르기 때문에 
		http://dev.spring.com/server/.html // 다른 출처이다. 호스트가 다르기 때문
		
		
		
	- 교차 출처 자원 공유 CORS, Cross Origin Resource Sharing
		- 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 체제
		- 동일 출처 정책에 대한 불편함을 해결하기 위해 등장한 정책
		- 웹 브라우저에서 외부 도메인 서버와 통신하기 위한 방식을 표준화한 스펙
		- 다른 출처의 리소스를 불러오려면 그 출처에서 올바른 CORS 헤더를 포함한 응답을 반환







[실행 조건]
1. mysql 버전 : mysql-installer-community-8.0.28.0
2. main-> webapp -> WEB-INF -> spring -> root-context.xml 수정

[기타 설명]
(1) src/main/java 밑의 패키지 명이 com.spring.jdbc라는 것은 com폴더 안의 spring폴더 안의 jdbc 폴더 안이라는 것을 의미한다.
(2) java파일을 xml로 정의해주기 위해서는 해당 패키지명과 같은 폴더들을 생성해 src/main/resources 안에 생성한다.
(3) xml파일은 해당 형식이있어 붙어넣어 주어야 하며 형식은 아래와 같다.
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
자세한 예시는 TimeMapper.xml을 보면된다.
(4) xml에서 정의할 때 파라미터 값을 받아오기 위해서는 #{deptno} 와 같이 적어준다.
	- ex) select deptno, dname, loc from dept where deptno = #{deptno}
(5) 스프링은 의존성 주입을 한다.